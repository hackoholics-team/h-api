openapi: 3.0.3
info:
  version: "latest"
  title: API
  description: This API provides access to the Hackoholics service.
servers:
  - url: "https://h-api-f3w5n4qb4a-uc.a.run.app"

paths:
  /ping:
    get:
      tags:
        - Health
      summary: Health check
      operationId: ping
      security:
        - BearerAuth: [ ]
      description: Check server health
      responses:
        200:
          description: pong
          content:
            text/plain:
              schema:
                type: string
                example: pong
        500:
          $ref: "#/components/responses/500"

  /signin:
    post:
      tags:
        - Security
      summary: Login user.
      operationId: signIn
      security:
        - BearerAuth: [ ]
      responses:
        "200":
          description: Authenticated User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"

  /signup:
    post:
      tags:
        - Security
      summary: Sign up user
      operationId: signUp
      security:
        - BearerAuth: [ ]
      requestBody:
        description: User to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: Signed up user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"
  /chat:
    post:
      tags:
        - Chat
      summary: Chat with ai
      operationId: sendMessage
      security:
        - BearerAuth: [ ]
      parameters:
        - name: message
          in: query
          required: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          image/*:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: Messages sequence
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"
  /users/{uId}/raw:
    put:
      tags:
        - File
      summary: update user profile pic
      operationId: updateUserProfile
      parameters:
        - name: uId
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          image/*:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: File identifier
          content:
            text/plain:
              schema:
                type: string
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"
  /files/{fId}/raw:
    get:
      tags:
        - File
      summary: upload file
      operationId: downloadFile
      parameters:
        - name: fId
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: [ ]
      responses:
        "200":
          description: Required file
          content:
            image/*:
              schema:
                type: string
                format: binary
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"
    put:
      tags:
        - File
      summary: upload file
      operationId: uploadFile
      parameters:
        - name: fId
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          image/*:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: File identifier
          content:
            text/plain:
              schema:
                type: string
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"
  /places:
    get:
      tags:
        - Place
      summary: Get parks and naturel reserve around a specific place
      operationId: getParkAndNReserve
      parameters:
        - name: location
          in: query
          required: true
          schema:
            type: string
      security:
        - BearerAuth: [ ]
      responses:
        "200":
          description: List of parks and reserve
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlacesSearchResult'
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"

  /places/about:
    get:
      tags:
        - Place
      summary: Get place description
      operationId: aboutParksOrReserve
      parameters:
        - name: placeId
          in: query
          required: true
          schema:
            type: string
      security:
        - BearerAuth: [ ]
      responses:
        "200":
          description: List of parks and reserve
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlacesSearchResult'
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"


components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  responses:
    400:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BadRequestException"
    403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NotAuthorizedException"
    404:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResourceNotFoundException"
    429:
      description: Too many requests to the API
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TooManyRequestsException"
    500:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InternalServerException"
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        birthDate:
          type: string
          format: date-time
        username:
          type: string
        firebaseId:
          type: string
        email:
          type: string
        photoId:
          type: string
    PlacesSearchResult:
      type: object
      properties:
        name:
          type: string
        address:
          type: string
        placeId:
          type: string
        geometry:
          type: object
          properties:
            lat:
              type: string
              format: double
            lon:
              type: string
              format: double
            bounds:
              type: array
              items:
                type: string
                format: double
        photo:
          type: string
          description: photo url
        rating:
          type: string
          format: double
        totalRate:
          type: integer
        openingHours:
          type: object
          properties:
            open:
              type: string
            close:
              type: string
            isOpenNow:
              type: boolean
    PlaceDetails:
      type: object
      properties:
        name:
          type: string
        address:
          type: string
        placeId:
          type: string
        reason:
          type: string
        overview:
          type: string
        localPhone:
          type: string
        internationalPhone:
          type: string
        photos:
          type: array
          items:
            type: string
        website:
          type: string
        geometry:
          type: object
          properties:
            lat:
              type: string
              format: double
            lon:
              type: string
              format: double
            bounds:
              type: array
              items:
                type: string
                format: double
        photo:
          type: string
          description: photo url
        rating:
          type: string
          format: double
        totalRate:
          type: integer

    Page:
      type: integer
      description: Start at `1`
    PageSize:
      type: integer
      description: Cannot exceed `500`
    Exception:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
    BadRequestException:
      allOf:
        - $ref: "#/components/schemas/Exception"
    NotAuthorizedException:
      allOf:
        - $ref: "#/components/schemas/Exception"
    ResourceNotFoundException:
      allOf:
        - $ref: "#/components/schemas/Exception"
    TooManyRequestsException:
      allOf:
        - $ref: "#/components/schemas/Exception"
    InternalServerException:
      allOf:
        - $ref: "#/components/schemas/Exception"